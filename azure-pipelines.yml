# Azure DevOps Pipeline for Gemini CLI DevSecOps Review
# Version: 1.1 - Fixed

# This pipeline is triggered by pull requests targeting the main branch.
trigger: none

pr:
- master

pool: GCA-AgentPool

variables:
# Links to the variable group containing your GEMINI_API_KEY and DOCKER_HUB_USER.
- group: 'Gemini-DevSecOps-Keys' 
- name: imageName
  value: '$(DOCKER_HUB_USER)/gemini-demo-app'

stages:
- stage: Scan_And_Analyze
  displayName: 'Run Scans & AI Analysis'
  jobs:
  - job: DevSecOps_Scan
    displayName: 'Run Security and Code Scans'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x' # Node.js is required for Gemini CLI
      displayName: 'Install Node.js'

    - script: |
        sudo apt-get update
        sudo apt-get install -y wget
        # Install Trivy for container scanning and SBOM generation
        wget https://github.com/aquasecurity/trivy/releases/download/v0.52.2/trivy_0.52.2_Linux-64bit.deb
        sudo dpkg -i trivy_0.52.2_Linux-64bit.deb
        # Install Gitleaks for secret scanning
        wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
        tar -xzf gitleaks_8.18.2_linux_x64.tar.gz
        sudo mv gitleaks /usr/local/bin/
        # Install Bandit for Python SAST
        sudo pip install bandit
      displayName: 'Install Scanning Tools (Trivy, Gitleaks, Bandit)'

    - script: |
        echo "Running Gitleaks for secret detection..."
        # FIX: Used '|| true' on the same line to prevent pipeline failure on findings.
        gitleaks detect --source . -r gitleaks_report.json || true
        
        echo "Running Bandit for Python SAST..."
        # FIX: Used '|| true' on the same line to prevent pipeline failure on findings.
        bandit -r . -f json -o bandit_report.json || true
      displayName: 'Run SAST and Secret Scans'
      
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        repository: '$(imageName)'
        tags: '$(Build.BuildId)'
        dockerfile: 'app/Dockerfile' # Assumes Dockerfile is in the 'app' directory of the repo

    - script: |
        echo "Scanning Docker image with Trivy for vulnerabilities..."
        # FIX: Used '|| true' on the same line.
        trivy image --format json --output trivy_report.json --severity HIGH,CRITICAL $(imageName):$(Build.BuildId) || true
        
        echo "Generating SBOM with Trivy..."
        trivy image --format cyclonedx --output sbom.xml $(imageName):$(Build.BuildId)
      displayName: 'Run Trivy Image Scan & Generate SBOM'

    - script: |
        echo "Installing Gemini CLI..."
        npm install -g @google/gemini-cli@0.1.18
      displayName: 'Install Gemini CLI v0.1.18'

    - script: |
        export GEMINI_API_KEY=$(GEMINI_API_KEY)
        
        PROMPT="""
        You are an expert DevSecOps review agent. A pull request has been submitted.
        Your task is to perform a comprehensive review based on the provided code and scan reports, following the rules in @GEMINI.md.

        **Scan Reports:**
        - SAST Report: @bandit_report.json
        - Secret Scan Report: @gitleaks_report.json
        - Container Vulnerability Report: @trivy_report.json
        - Software Bill of Materials (SBOM): @sbom.xml

        **Instructions:**
        1. **Code Review:** Review the code changes in this pull request. Provide specific, actionable suggestions for improvements.
        2. **Security Analysis:** Analyze all provided security reports.
        3. **Policy Check:** Based on the rules in @GEMINI.md, determine if this PR passes or fails. State the result clearly (e.g., "POLICY CHECK: PASS" or "POLICY CHECK: FAIL"). If it fails, list the exact reasons.
        4. **Generate Summary:** Combine all findings into a single, well-formatted markdown report suitable for a pull request comment. Start with the policy check result.
        """
        
        gemini -p "$PROMPT" --context GEMINI.md > gemini_review.md
      displayName: 'Run Gemini CLI for AI Analysis'
      
    - task: PowerShell@2
      displayName: 'Post Gemini Review to PR'
      inputs:
        targetType: 'inline'
        # FIX: Replaced the entire script block with a valid JSON payload structure and correct PowerShell commands.
        script: |
          # Read the markdown report and escape it for the JSON payload
          $reviewContent = Get-Content -Raw -Path gemini_review.md | ConvertTo-Json
          
          # Azure DevOps REST API endpoint for creating a new thread on a PR
          $url = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=6.0"
          
          # Use the pre-defined, secure System.AccessToken for authentication
          $headers = @{
              "Authorization" = "Bearer $(System.AccessToken)"
              "Content-Type" = "application/json"
          }

          # Construct the valid JSON payload to post a comment
          $payload = @"
          {
            "comments": [
              {
                "parentCommentId": 0,
                "content": $reviewContent,
                "commentType": 1
              }
            ],
            "status": 1
          }
          "@
          
          Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $payload
      condition: succeeded()
