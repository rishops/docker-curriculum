trigger: none

pr:
- master

pool: GCA-AgentPool

variables:
- group: 'Gemini-DevSecOps-Keys' 

stages:
- stage: Scan_And_Analyze
  displayName: 'Run Scans & AI Analysis'
  jobs:
  - job: DevSecOps_Scan
    displayName: 'Run Security and Code Scans'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - script: |
        sudo apt-get update
        sudo apt-get install -y wget jq # Added jq for the bash script
        wget https://github.com/aquasecurity/trivy/releases/download/v0.52.2/trivy_0.52.2_Linux-64bit.deb
        sudo dpkg -i trivy_0.52.2_Linux-64bit.deb
        wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
        tar -xzf gitleaks_8.18.2_linux_x64.tar.gz
        sudo mv gitleaks /usr/local/bin/
        python3 -m venv bandit-env
        source bandit-env/bin/activate
        pip install bandit
        npm install -g @google/gemini-cli@0.1.18
      displayName: 'Install All Scanning Tools & Gemini CLI'

    - script: |
        echo "Running Gitleaks for secret detection..."
        gitleaks detect --source . -r gitleaks_report.json || true
        
        echo "Running Bandit for Python SAST..."
        source bandit-env/bin/activate
        bandit -r . -f json -o bandit_report.json || true
      displayName: 'Run SAST & Secret Scans'
      
    - task: Docker@2
      displayName: 'Build Static Site Docker Image'
      inputs:
        command: 'build'
        dockerfile: 'static-site/Dockerfile'
        repository: '$(DOCKER_HUB_USER)/gemini-demo-static-site' 
        tags: '$(Build.BuildId)'
    - task: Docker@2
      displayName: 'Build Flask App Docker Image'
      inputs:
        command: 'build'
        dockerfile: 'flask-app/Dockerfile' 
        repository: '$(DOCKER_HUB_USER)/gemini-demo-flask-app'
        tags: '$(Build.BuildId)'

    - script: |
        echo "Scanning Docker images with Trivy..."
        trivy image --format json --output trivy_static_site_report.json --severity HIGH,CRITICAL $(DOCKER_HUB_USER)/gemini-demo-static-site:$(Build.BuildId) || true
        trivy image --format json --output trivy_flask_app_report.json --severity HIGH,CRITICAL $(DOCKER_HUB_USER)/gemini-demo-flask-app:$(Build.BuildId) || true
      displayName: 'Run Trivy Image Scans'

    # FIX: Replaced heredoc with file creation and cat/pipe method
    - script: |
        export GEMINI_API_KEY=$(GEMINI_API_KEY)

        echo "Creating prompts for specialist agents..."
        echo "You are a Python code security analyst. Analyze the following Bandit SAST report: @bandit_report.json. Summarize the key vulnerabilities found." > bandit-prompt.md
        echo "You are a secrets detection specialist. Analyze this Gitleaks report: @gitleaks_report.json. State clearly if any hardcoded secrets were found." > gitleaks-prompt.md
        echo "You are a container security expert. Analyze these two Trivy vulnerability reports: @trivy_static_site_report.json and @trivy_flask_app_report.json. Summarize the most critical vulnerabilities." > trivy-prompt.md

        echo "Invoking Specialist AI Agents..."
        cat bandit-prompt.md | gemini > bandit-sast-agent.md
        cat gitleaks-prompt.md | gemini > gitleaks-secrets-agent.md
        cat trivy-prompt.md | gemini > trivy-container-agent.md
      displayName: 'Run Specialist AI Agents for Focused Analysis'

    # FIX: Replaced heredoc with file creation and cat/pipe method
    - script: |
        export GEMINI_API_KEY=$(GEMINI_API_KEY)

        echo "Creating prompt for lead agent..."
        echo "You are a lead security agent. Your team of agents has provided these reports: SAST Analysis: @bandit-sast-agent.md, Secrets Analysis: @gitleaks-secrets-agent.md, Container Vulnerability Analysis: @trivy-container-agent.md. Your tasks: 1. **Final Policy Check:** Based on the reports and rules in @GEMINI.md, state 'POLICY CHECK: PASS' or 'POLICY CHECK: FAIL'. 2. **Executive Summary:** Provide a brief overview of the security posture. 3. **Consolidated Findings:** Synthesize key findings from each agent into a clear, actionable list." > lead-agent-prompt.md

        echo "Invoking Lead Security Agent..."
        cat lead-agent-prompt.md | gemini > lead-security-agent.md

        echo "--- CONSOLIDATED SECURITY REPORT ---"
        cat lead-security-agent.md
        echo "------------------------------------"
      displayName: 'Consolidate Agent Reports & Display Final Summary'
      
    - bash: |
        comment_content=$(jq -Rsa . < lead-security-agent.md)
        pr_comment_body="{
          \"comments\": [
            {
              \"parentCommentId\": 0,
              \"content\": ${comment_content},
              \"commentType\": 1
            }
          ],
          \"status\": 1
        }"
        
        curl -L -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $(System.AccessToken)" \
        -d "${pr_comment_body}" \
        "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=6.0"
      displayName: 'Post Consolidated Review to PR'
      condition: succeeded()
